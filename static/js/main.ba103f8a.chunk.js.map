{"version":3,"sources":["api/api.ts","utils/constants.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","index.tsx","App.tsx"],"names":["getData","url","a","fetch","response","ok","Error","statusText","json","catch","error","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","findMovie","disabledAdd","foundMovie","addMovie","isLoading","useState","query","setQuery","inputClass","classNames","handleClick","value","trim","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","onChange","target","toLowerCase","onClick","disabled","ReactDOM","render","staticList","setMovies","setFoundMovie","setError","setIsLoading","undefined","setDisabledAdd","getCorrectMovies","Title","Plot","Poster","imdbID","some","then","data","err","message","finally","setTimeout","document","getElementById"],"mappings":"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","file":"static/js/main.ba103f8a.chunk.js","sourcesContent":["import { BASE_URL } from '../utils/constants';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(BASE_URL + url);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  return response.json()\n    .catch(error => error);\n};\n","export const BASE_URL = 'https://www.omdbapi.com/?apikey=9bb7571e&t=';\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { FC, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  findMovie(query: string): void;\n  foundMovie: Movie | null;\n  disabledAdd: boolean | undefined;\n  addMovie: () => void;\n  error: string;\n  isLoading: boolean;\n}\n\nexport const FindMovie: FC<Props> = ({\n  findMovie,\n  disabledAdd,\n  foundMovie,\n  error,\n  addMovie,\n  isLoading,\n}) => {\n  const [query, setQuery] = useState('');\n\n  const inputClass = classNames('input', { 'is-danger': error });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value.toLowerCase());\n  };\n\n  const handleClick = (value: string) => {\n    if (!value.trim()) {\n      return;\n    }\n\n    findMovie(value);\n\n    if (!foundMovie?.title) {\n      setQuery('');\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleClick(query);\n  };\n\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              value={query}\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={inputClass}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              {error}\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              onClick={() => handleClick(query)}\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              onClick={addMovie}\n              className=\"button is-primary\"\n              disabled={disabledAdd}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n\n        {foundMovie ? (\n          <MovieCard {...foundMovie} />\n        ) : isLoading && (\n          <div className=\"container-loader\">\n            <div className=\"loader\" />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { FC, useState } from 'react';\nimport './App.scss';\nimport { getData } from './api/api';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport staticList from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState <Movie[]>([...staticList]);\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [disabledAdd, setDisabledAdd] = useState<boolean | undefined>(undefined);\n\n  const getCorrectMovies = async (query: string): Promise<Movie> => {\n    const movie: MovieFromServer = await getData(query);\n\n    return ({\n      title: movie.Title,\n      description: movie.Plot,\n      imgUrl: movie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n      imdbId: movie.imdbID,\n    });\n  };\n\n  const handleLoad = (query: string) => {\n    setIsLoading(true);\n    getCorrectMovies(query)\n      .then(data => {\n        if (!data.title) {\n          throw new Error('Can\\'t find a movie with such a title');\n        }\n\n        setDisabledAdd(undefined);\n        setError('');\n        setFoundMovie(data);\n      }).catch((err) => {\n        setDisabledAdd(true);\n        setError(err.message);\n        setFoundMovie(null);\n      }).finally(() => {\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 500);\n      });\n  };\n\n\n  const addMovie = () => {\n    setDisabledAdd(undefined);\n    if (foundMovie && !movies.some(movie => movie.imdbId === foundMovie.imdbId)) {\n      setMovies([...movies, foundMovie]);\n      setFoundMovie(null);\n    } else if (foundMovie) {\n      setError('This movie has already been added to your favorites list');\n      setDisabledAdd(true);\n    } else {\n      setError('');\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          disabledAdd={disabledAdd}\n          isLoading={isLoading}\n          error={error}\n          addMovie={addMovie}\n          findMovie={handleLoad}\n          foundMovie={foundMovie}\n        />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}